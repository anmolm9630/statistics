# -*- coding: utf-8 -*-
"""Stats Part 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FIPOm8b_NDSVV1AE3spTzQY9fW53gl4t

## Statistics Practical Implementation
### Measure Of Central Tendency

1. Mean
2. Median
3. Mode
"""



ages=[23,24,32,45,12,43,67,45,32,56,32,120]

import numpy as np
print(np.mean(ages))
print(np.median(ages))

import statistics
print(statistics.mean(ages))
print(statistics.median(ages))

import statistics
statistics.mode(ages)

import seaborn as sns
sns.boxplot(ages)

"""## 5 Number Summary"""

import numpy as np
q1,q3=np.percentile(ages,[25,75])

print(q1,q3)

## to check outlier[Lower Fence- Higher fence]
IQR=q3-q1
lower_fence=q1-1.5*(IQR)
higher_fence=q3+1.5*(IQR)
print(lower_fence,higher_fence)

"""## Measure Of Dispersion

1. Variance
2. Standard Deviation
"""

statistics.variance(ages)

np.var(ages,axis=0)

def variance(data):
  n=len(ages)
  ## mean of the data
  mean=sum(data)/n
  ## variance
  deviation=[(x - mean) ** 2 for x in data]
  variance=sum(deviation)/(n-1)
  return variance

variance(ages)

def variance(data,dof=0):
  n=len(ages)
  ## mean of the data
  mean=sum(data)/n
  ## variance
  deviation=[(x - mean) ** 2 for x in data]
  variance=sum(deviation)/(n-dof)
  return variance

variance(ages,dof=1)

statistics.pvariance(ages)

import math
math.sqrt(statistics.pvariance(ages))

"""## Histograms And PDF"""

import seaborn as sns
sns.histplot(ages,kde=True)

df=sns.load_dataset('iris')

df.head()

sns.histplot(df['sepal_length'],kde=True)

sns.histplot(df['sepal_width'],kde=True)

sns.histplot(df['petal_length'],kde=True)

sns.histplot(df['petal_width'],kde=True)

## create a normal distributed data
s=np.random.normal(0.5,0.2,1000)

s

sns.histplot(s,kde=True)

"""## Other Distribuiton
## Log Normal Distribution,Power Law Distribution
"""

mu, sigma = 3., 1. # mean and standard deviation
s = np.random.lognormal(mu, sigma, 1000)

sns.histplot(s,kde=True)

sns.histplot(np.log(s),kde=True)

"""## Check whether Disstribution is Normal Distribution"""

#### If you want to check whether feature is guassian or normal distributed
#### Q-Q plot
import matplotlib.pyplot as plt
import scipy.stats as stat
import pylab
def plot_data(sample):
    plt.figure(figsize=(10,6))
    plt.subplot(1,2,1)
    sns.histplot(sample)
    plt.subplot(1,2,2)
    stat.probplot(sample,dist='norm',plot=pylab)
    plt.show()

## create a normal distributed data
s=np.random.normal(0.5,0.2,1000)
plot_data(s)

plot_data(df['sepal_width'])

mu, sigma = 3., 1. # mean and standard deviation
sample = np.random.lognormal(mu, sigma, 100)

def plot_data_log(sample):
    plt.figure(figsize=(10,6))
    plt.subplot(1,2,1)
    sns.histplot(sample)
    plt.subplot(1,2,2)
    stat.probplot(np.log(sample),dist='norm',plot=pylab)
    plt.show()

plot_data_log(sample)

"""##Pearson and Sperman Rank Correlation """

df=sns.load_dataset('tips')

df.head()

import pandas as pd

df.corr()

sns.pairplot(df)

